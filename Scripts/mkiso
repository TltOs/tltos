#!/usr/bin/bash
#
#   liso - liya iso building script
#
#   Copyright (c) 2023 SAYED M. HISHAM <drhishamsayed128@protonmail.com>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#   liso uses quite a few external programs during its execution. You
#   need to have at least the following installed for jasmitha to function:
#   awk, bsdtar (libarchive), bzip2, coreutils, fakeroot, file, find (findutils),
#   gettext, gpg, grep, gzip, sed, tput (ncurses), xz, archiso, squashfs-tools, erofs-tools.


#-->> Clear The Screen
clear

#--->> Message

#-->> Get Username
echo "### User Name ###"
read username

#-->> Select The Desktop
echo "### Desktop Environment ###"
echo "1: Cinnamon"
echo "2: XFCE"
echo "3: MATE"
read desktop

#-->> Make Directory
if [ ! -d "/var/tmp/iso-profiles" ]; then
mkdir /var/tmp/iso-profiles
fi
#-->> Declare Variables
workdir="/var/tmp/iso-profiles/${username}"
cmpdir="/usr/share/liso/components"
#-->> Copy First
if [ -d "$workdir" ]; then
rm -rf $workdir
fi
cp -rf /usr/share/liso/iso-profiles/common $workdir
#-->> Cinnamon
if [[ $desktop == 1 ]]; then
cat $workdir/Packages-Choice $workdir/Default-Packages $workdir/Packages-Common $workdir/Packages-Cinnamon $workdir/Packages-User > $workdir/packages.x86_64
cp -rf $cmpdir/cinnaconfig/.config $workdir/airootfs/etc/skel
cp -rf $cmpdir/cinnaconfig/.config $workdir/airootfs/root
sed -i 's/user-session=nosession/user-session=cinnamon/g' $workdir/airootfs/etc/lightdm/lightdm.conf
echo "    - xdg-desktop-portal-gnome" >> $workdir/airootfs/etc/calamares/modules/packages.conf
sed -i 's/lightdm-gtk-greeter/lightdm-slick-greeter/g' $workdir/packages.x86_64
sed -i 's/lightdm-gtk-greeter-settings/lightdm-settings/g' $workdir/packages.x86_64
sed -i 's/lightdm-gtk-greeter/lightdm-slick-greeter/g' $workdir/airootfs/etc/lightdm/lightdm.conf
fi

#-->> XFCE
if [[ $desktop == 2 ]]; then
cat $workdir/Packages-Choice $workdir/Default-Packages $workdir/Packages-Common $workdir/Packages-XFCE $workdir/Packages-User > $workdir/packages.x86_64
cp -rf $cmpdir/xfceconfig/.config $workdir/airootfs/etc/skel
cp -rf $cmpdir/xfceconfig/.config $workdir/airootfs/root
sed -i 's/user-session=nosession/user-session=xfce/g' $workdir/airootfs/etc/lightdm/lightdm.conf
fi

#-->> MATE
if [[ $desktop == 3 ]]; then
cat $workdir/Packages-Choice $workdir/Default-Packages $workdir/Packages-Common $workdir/Packages-MATE $workdir/Packages-User > $workdir/packages.x86_64
cp -rf $cmpdir/mate/.config $workdir/airootfs/etc/skel
cp -rf $cmpdir/mateconfig/.config $workdir/airootfs/root
sed -i 's/user-session=nosession/user-session=mate/g' $workdir/airootfs/etc/lightdm/lightdm.conf
fi

#-->> Version No.
build_date=$(date --date="@${SOURCE_DATE_EPOCH:-$(date +%s)}" +%Y-%m-%d)
echo "### Version Number ###"
read version_no
sed -i "s/23/$version_no/g" $workdir/airootfs/etc/calamares/branding/default/branding.desc
sed -i "s/23/$version_no/g" $workdir/profiledef.sh
sed -i "s/iso_version_name/$version_no/g" $workdir/airootfs/etc/liya-release
sed -i "s/iso_date_modify/$build_date/g" $workdir/airootfs/etc/liya-release
echo "### CODENAME ###"
read codename_liya
sed -i "s/codename_new/$codename_liya/g" $workdir/airootfs/etc/liya-release


#-->> Kernel (Bootloader & Installer)
echo "### Kernel ###"
echo "==>> 1: Vanilla Linux"
echo "==>> 2: Linux-LTS"
echo "==>> 3: Linux-Zen"
echo "==>> 4: Linux-Xanmod"
echo "==>> 5: Linux-Mainline"
read kernel
if [[ $kernel == 1 ]]; then
kernel_name=linux
fi
if [[ $kernel == 2 ]]; then
kernel_name=linux-lts
fi
if [[ $kernel == 3 ]]; then
kernel_name=linux-zen
fi
if [[ $kernel == 4 ]]; then
kernel_name=linux-xanmod
fi

if [[ $kernel == 5 ]]; then
kernel_name=linux-mainline
fi

#-->> Copy Files
headers_name=$kernel_name-headers
boot_kernel=vmlinuz-$kernel_name
initcpio_name=initramfs-$kernel_name.img
echo $kernel_name >> $workdir/packages.x86_64
echo $headers_name >> $workdir/packages.x86_64
sed -i "s/kernel: linux/kernel: $kernel_name/g" $workdir/airootfs/etc/calamares/modules/initcpio.conf
sed -i "s/vmlinuz-linux/$boot_kernel/g" $workdir/airootfs/etc/calamares/modules/unpackfs.conf
#-->> Syslinux
sed -i "s/vmlinuz-linux/$boot_kernel/g" $workdir/syslinux/archiso_sys-linux.cfg
sed -i "s/vmlinuz-linux/$boot_kernel/g" $workdir/syslinux/archiso_pxe-linux.cfg
sed -i "s/initramfs-linux.img/$initcpio_name/g" $workdir/syslinux/archiso_pxe-linux.cfg
sed -i "s/initramfs-linux.img/$initcpio_name/g" $workdir/syslinux/archiso_sys-linux.cfg
#-->> EFIBOOT
sed -i "s/vmlinuz-linux/$boot_kernel/g" $workdir/grub/grub.cfg
sed -i "s/initramfs-linux.img/$initcpio_name/g" $workdir/grub/grub.cfg

#-->> Remove fallback
sed -i "s/linux/$kernel_name/g" $workdir/airootfs/etc/pacman.d/hooks/remove-fallback.hook



#-->> Blackarch
echo "### Blackarch Support ###"
echo "1: Yes"
echo "2: No"
read blkarch_sup
if [[ $blkarch_sup -eq 1 ]]; then
#-->> Pacman Repo Add
mv $workdir/pacman-blackarch.conf $workdir/pacman.conf
cp -rf $workdir/pacman.conf $workdir/airootfs/etc/pacman.conf
sed -i 's/archlinux chaotic/archlinux chaotic blackarch/g' $workdir/airootfs/etc/systemd/system/pacman-init.service
#-->> Add Blackarch Packages
cat $workdir/Packages-Blackarch $workdir/packages.x86_64 > $workdir/packages.x86_64.1
mv $workdir/packages.x86_64.1 $workdir/packages.x86_64
fi

if [[ $blkarch_sup -eq 2 ]]; then
echo "### Procceding ###"
fi

#-->> Sort Packages
cd $workdir
mv packages.x86_64 packages.x86_64.1
sort packages.x86_64.1 > packages.x86_642
sed '/^#/d' packages.x86_642 > packages.x86_643
awk '{if(NF>0) {print $0}}' packages.x86_643 > packages.x86_64
rm -rf packages.x86_642 packages.x86_643 packages.x86_64.1
rm -rf Packages-*

#-->> ISO Building
# To do - generate a random string of numbers and letters and pass on to the work and out dirs
echo "### Build The ISO? ###"
echo "1: Yes"
echo "2: No"
read buildiso
if [[ $buildiso == 1 ]]; then
if [ ! -d "/liso" ]; then
sudo mkdir /liso
fi
if [ -d "/liso/work" ]; then
echo "### Removing Work Directory ###"
sudo rm -rf /liso/work
fi
sudo mkarchiso -v -w /liso/work -o /liso/out $workdir
if [[ $? -eq 1 ]]
then
echo "### mkarchiso Returned With errors, rerunning mkarchiso ###"
sudo mkarchiso -v -w /liso/work -o /liso/out $workdir
fi
fi
if [[ $buildiso == 2 ]]; then
exit
fi

